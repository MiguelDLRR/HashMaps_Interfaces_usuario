
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.HashMap;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Miguel de la Rubia
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form VentanaPrincipal
     */
    //Crear un HashMap llamado "empleados" teniendo en cuenta el nombre de los empleados
    //Creamos el HAshMap en la clase para luego poder utilizarlo si lo nombro en distintos métodos
    static HashMap<String ,Empleado> empleados= new HashMap<>();
    
    
    public VentanaPrincipal() throws FileNotFoundException, IOException, ClassNotFoundException, ErrorLeerArchivo {
        
        //iniciar componentes visuales (gestionado por Swing)
        initComponents();
        
        inicioAplicacion();
        
        leerFichero();

        
    }

    public void inicioAplicacion(){
    
    //Creacion de nuevos empleados
        Empleado e1 = new Empleado("Juan","Rodriguez",1600);
        Empleado e2 = new Empleado("Ana","Sanchez",1300);
        Empleado e3 = new Empleado("Isabel","Oliveros",2600);
        Empleado e4 = new Empleado("Miguel","Rojo",3800);
        
        //guardamos los empleados en el HashMap "empleados"
        empleados.put("Juan", e1);
        empleados.put("Ana", e2);
        empleados.put("Isabel", e3);
        empleados.put("Miguel", e4);
        
        //Creamos un nuevo archivo para poder guardar el HashMap (serializado)
        File archivo = new File("Empleados");
        

        //ESCRIBIR EN EL ARCHIVO
        
        try {
           
            ObjectOutputStream oos;
            oos = new ObjectOutputStream(new FileOutputStream(archivo));
            oos.writeObject(empleados);//guardamos el HashMap "empleados" en el file
            oos.close();
            
        } catch (IOException ex) {
            System.out.println("Error al serializar");
        }
       
    }  
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTxtUser = new javax.swing.JTextField();
        jTxtPassword = new javax.swing.JPasswordField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jBtnLogin = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("LOGIN");

        jLabel2.setText("Nombre usuario");

        jLabel3.setText("Contraseña (apellido)");

        jBtnLogin.setText("Aceptar");
        jBtnLogin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBtnLoginMouseClicked(evt);
            }
        });
        jBtnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnLoginActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jBtnLogin)
                .addGap(154, 154, 154))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTxtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTxtUser, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(179, 179, 179)
                        .addComponent(jLabel1)))
                .addContainerGap(97, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jLabel1)
                .addGap(57, 57, 57)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTxtUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTxtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(43, 43, 43)
                .addComponent(jBtnLogin)
                .addContainerGap(53, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBtnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnLoginActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jBtnLoginActionPerformed

    private void jBtnLoginMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBtnLoginMouseClicked
        
        //creamos una variable con nombre user para que guarde el nombre de usuario introducido en el textField
        String user = jTxtUser.getText();
        //creamos una variable de tipo String para que guarde la password escrita en el fieldPassword
        String password = jTxtPassword.getText();
        
        if(empleados.containsKey(user)){
            Empleado testEmpleado = empleados.get(user);
            
            if(testEmpleado.getApellido().equals(password)){
                VentanaBienvenida ventanaBienvenida = new VentanaBienvenida();
                this.setVisible(false);
                ventanaBienvenida.setVisible(true);
                
            }else{
                System.out.println("Password incorrecto");
                JOptionPane.showMessageDialog(this, "Password erronea", "Error en Login", HEIGHT);
            }
        }else{
            JOptionPane.showMessageDialog(this, "Credenciales erroneas", "Error en Login", HEIGHT);
            System.out.println("No existe el empleado");
        }
        
    }//GEN-LAST:event_jBtnLoginMouseClicked

    public static void leerFichero() throws ErrorLeerArchivo, IOException, ClassNotFoundException{
    //
        HashMap<String ,Empleado> empleados= new HashMap<String, Empleado>();
    

        //LEER EL ARCHIVO
        
        File archivo = new File ("Empleados");
        try {
            ObjectInputStream ois;
            ois = new ObjectInputStream(new FileInputStream("Empleados"));
            empleados = (HashMap<String, Empleado>)ois.readObject();
            ois.close();
            
            //iterator para que recorra el HashMap y muestre por consola la informacion de los empleados
            Iterator it = empleados.keySet().iterator();
            
            while(it.hasNext()){
                System.out.println(empleados.get(it.next()).toString());
            }
            
            
        } catch (IOException | ClassNotFoundException e) {
            System.out.println("No se ha podido leer el archivo");
            throw new ErrorLeerArchivo("Error al leer el archivo: "+ e.getMessage());
        }
        
    
    
    
    
    
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    try {
                        new VentanaPrincipal().setVisible(true);
                    } catch (ErrorLeerArchivo ex) {
                        Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnLogin;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPasswordField jTxtPassword;
    private javax.swing.JTextField jTxtUser;
    // End of variables declaration//GEN-END:variables
}
